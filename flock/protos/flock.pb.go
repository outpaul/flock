// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/flock.proto

package flock

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FlockRequest struct {
	// Types that are valid to be assigned to Value:
	//	*FlockRequest_Ping
	//	*FlockRequest_Batch
	Value                isFlockRequest_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FlockRequest) Reset()         { *m = FlockRequest{} }
func (m *FlockRequest) String() string { return proto.CompactTextString(m) }
func (*FlockRequest) ProtoMessage()    {}
func (*FlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_flock_d805bb5d4305963c, []int{0}
}
func (m *FlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlockRequest.Unmarshal(m, b)
}
func (m *FlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlockRequest.Marshal(b, m, deterministic)
}
func (dst *FlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlockRequest.Merge(dst, src)
}
func (m *FlockRequest) XXX_Size() int {
	return xxx_messageInfo_FlockRequest.Size(m)
}
func (m *FlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlockRequest proto.InternalMessageInfo

type isFlockRequest_Value interface {
	isFlockRequest_Value()
}

type FlockRequest_Ping struct {
	Ping *Ping `protobuf:"bytes,1,opt,name=ping,oneof"`
}
type FlockRequest_Batch struct {
	Batch *BatchInsertRequest `protobuf:"bytes,2,opt,name=batch,oneof"`
}

func (*FlockRequest_Ping) isFlockRequest_Value()  {}
func (*FlockRequest_Batch) isFlockRequest_Value() {}

func (m *FlockRequest) GetValue() isFlockRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FlockRequest) GetPing() *Ping {
	if x, ok := m.GetValue().(*FlockRequest_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *FlockRequest) GetBatch() *BatchInsertRequest {
	if x, ok := m.GetValue().(*FlockRequest_Batch); ok {
		return x.Batch
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FlockRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FlockRequest_OneofMarshaler, _FlockRequest_OneofUnmarshaler, _FlockRequest_OneofSizer, []interface{}{
		(*FlockRequest_Ping)(nil),
		(*FlockRequest_Batch)(nil),
	}
}

func _FlockRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FlockRequest)
	// value
	switch x := m.Value.(type) {
	case *FlockRequest_Ping:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ping); err != nil {
			return err
		}
	case *FlockRequest_Batch:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Batch); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FlockRequest.Value has unexpected type %T", x)
	}
	return nil
}

func _FlockRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FlockRequest)
	switch tag {
	case 1: // value.ping
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ping)
		err := b.DecodeMessage(msg)
		m.Value = &FlockRequest_Ping{msg}
		return true, err
	case 2: // value.batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchInsertRequest)
		err := b.DecodeMessage(msg)
		m.Value = &FlockRequest_Batch{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FlockRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FlockRequest)
	// value
	switch x := m.Value.(type) {
	case *FlockRequest_Ping:
		s := proto.Size(x.Ping)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlockRequest_Batch:
		s := proto.Size(x.Batch)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FlockResponse struct {
	// Types that are valid to be assigned to Value:
	//	*FlockResponse_Pong
	//	*FlockResponse_Batch
	Value                isFlockResponse_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FlockResponse) Reset()         { *m = FlockResponse{} }
func (m *FlockResponse) String() string { return proto.CompactTextString(m) }
func (*FlockResponse) ProtoMessage()    {}
func (*FlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_flock_d805bb5d4305963c, []int{1}
}
func (m *FlockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlockResponse.Unmarshal(m, b)
}
func (m *FlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlockResponse.Marshal(b, m, deterministic)
}
func (dst *FlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlockResponse.Merge(dst, src)
}
func (m *FlockResponse) XXX_Size() int {
	return xxx_messageInfo_FlockResponse.Size(m)
}
func (m *FlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FlockResponse proto.InternalMessageInfo

type isFlockResponse_Value interface {
	isFlockResponse_Value()
}

type FlockResponse_Pong struct {
	Pong *Pong `protobuf:"bytes,1,opt,name=pong,oneof"`
}
type FlockResponse_Batch struct {
	Batch *BatchInsertResponse `protobuf:"bytes,2,opt,name=batch,oneof"`
}

func (*FlockResponse_Pong) isFlockResponse_Value()  {}
func (*FlockResponse_Batch) isFlockResponse_Value() {}

func (m *FlockResponse) GetValue() isFlockResponse_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FlockResponse) GetPong() *Pong {
	if x, ok := m.GetValue().(*FlockResponse_Pong); ok {
		return x.Pong
	}
	return nil
}

func (m *FlockResponse) GetBatch() *BatchInsertResponse {
	if x, ok := m.GetValue().(*FlockResponse_Batch); ok {
		return x.Batch
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FlockResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FlockResponse_OneofMarshaler, _FlockResponse_OneofUnmarshaler, _FlockResponse_OneofSizer, []interface{}{
		(*FlockResponse_Pong)(nil),
		(*FlockResponse_Batch)(nil),
	}
}

func _FlockResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FlockResponse)
	// value
	switch x := m.Value.(type) {
	case *FlockResponse_Pong:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pong); err != nil {
			return err
		}
	case *FlockResponse_Batch:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Batch); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FlockResponse.Value has unexpected type %T", x)
	}
	return nil
}

func _FlockResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FlockResponse)
	switch tag {
	case 1: // value.pong
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Pong)
		err := b.DecodeMessage(msg)
		m.Value = &FlockResponse_Pong{msg}
		return true, err
	case 2: // value.batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchInsertResponse)
		err := b.DecodeMessage(msg)
		m.Value = &FlockResponse_Batch{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FlockResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FlockResponse)
	// value
	switch x := m.Value.(type) {
	case *FlockResponse_Pong:
		s := proto.Size(x.Pong)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlockResponse_Batch:
		s := proto.Size(x.Batch)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Ping struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_flock_d805bb5d4305963c, []int{2}
}
func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (dst *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(dst, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

type Pong struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_flock_d805bb5d4305963c, []int{3}
}
func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (dst *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(dst, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

type BatchInsertRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Table                string   `protobuf:"bytes,2,opt,name=table" json:"table,omitempty"`
	TableName            string   `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchInsertRequest) Reset()         { *m = BatchInsertRequest{} }
func (m *BatchInsertRequest) String() string { return proto.CompactTextString(m) }
func (*BatchInsertRequest) ProtoMessage()    {}
func (*BatchInsertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_flock_d805bb5d4305963c, []int{4}
}
func (m *BatchInsertRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchInsertRequest.Unmarshal(m, b)
}
func (m *BatchInsertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchInsertRequest.Marshal(b, m, deterministic)
}
func (dst *BatchInsertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchInsertRequest.Merge(dst, src)
}
func (m *BatchInsertRequest) XXX_Size() int {
	return xxx_messageInfo_BatchInsertRequest.Size(m)
}
func (m *BatchInsertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchInsertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchInsertRequest proto.InternalMessageInfo

func (m *BatchInsertRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BatchInsertRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *BatchInsertRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

type BatchInsertResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchInsertResponse) Reset()         { *m = BatchInsertResponse{} }
func (m *BatchInsertResponse) String() string { return proto.CompactTextString(m) }
func (*BatchInsertResponse) ProtoMessage()    {}
func (*BatchInsertResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_flock_d805bb5d4305963c, []int{5}
}
func (m *BatchInsertResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchInsertResponse.Unmarshal(m, b)
}
func (m *BatchInsertResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchInsertResponse.Marshal(b, m, deterministic)
}
func (dst *BatchInsertResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchInsertResponse.Merge(dst, src)
}
func (m *BatchInsertResponse) XXX_Size() int {
	return xxx_messageInfo_BatchInsertResponse.Size(m)
}
func (m *BatchInsertResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchInsertResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchInsertResponse proto.InternalMessageInfo

func (m *BatchInsertResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*FlockRequest)(nil), "flock.FlockRequest")
	proto.RegisterType((*FlockResponse)(nil), "flock.FlockResponse")
	proto.RegisterType((*Ping)(nil), "flock.Ping")
	proto.RegisterType((*Pong)(nil), "flock.Pong")
	proto.RegisterType((*BatchInsertRequest)(nil), "flock.BatchInsertRequest")
	proto.RegisterType((*BatchInsertResponse)(nil), "flock.BatchInsertResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Flock service

type FlockClient interface {
	Flock(ctx context.Context, opts ...grpc.CallOption) (Flock_FlockClient, error)
}

type flockClient struct {
	cc *grpc.ClientConn
}

func NewFlockClient(cc *grpc.ClientConn) FlockClient {
	return &flockClient{cc}
}

func (c *flockClient) Flock(ctx context.Context, opts ...grpc.CallOption) (Flock_FlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Flock_serviceDesc.Streams[0], c.cc, "/flock.Flock/Flock", opts...)
	if err != nil {
		return nil, err
	}
	x := &flockFlockClient{stream}
	return x, nil
}

type Flock_FlockClient interface {
	Send(*FlockRequest) error
	Recv() (*FlockResponse, error)
	grpc.ClientStream
}

type flockFlockClient struct {
	grpc.ClientStream
}

func (x *flockFlockClient) Send(m *FlockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *flockFlockClient) Recv() (*FlockResponse, error) {
	m := new(FlockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Flock service

type FlockServer interface {
	Flock(Flock_FlockServer) error
}

func RegisterFlockServer(s *grpc.Server, srv FlockServer) {
	s.RegisterService(&_Flock_serviceDesc, srv)
}

func _Flock_Flock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlockServer).Flock(&flockFlockServer{stream})
}

type Flock_FlockServer interface {
	Send(*FlockResponse) error
	Recv() (*FlockRequest, error)
	grpc.ServerStream
}

type flockFlockServer struct {
	grpc.ServerStream
}

func (x *flockFlockServer) Send(m *FlockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *flockFlockServer) Recv() (*FlockRequest, error) {
	m := new(FlockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Flock_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flock.Flock",
	HandlerType: (*FlockServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Flock",
			Handler:       _Flock_Flock_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/flock.proto",
}

func init() { proto.RegisterFile("protos/flock.proto", fileDescriptor_flock_d805bb5d4305963c) }

var fileDescriptor_flock_d805bb5d4305963c = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x4f, 0xf2, 0x40,
	0x10, 0xc5, 0xe9, 0xf7, 0x75, 0x41, 0x06, 0xbc, 0x0c, 0x1c, 0x2a, 0x89, 0x89, 0xf6, 0xc4, 0x09,
	0xb4, 0x26, 0x5e, 0x4d, 0x38, 0x18, 0xbc, 0x18, 0xb3, 0x77, 0x63, 0xb6, 0x75, 0xad, 0xc4, 0x76,
	0xa7, 0xb2, 0x5b, 0xff, 0x7e, 0xd3, 0xd9, 0x25, 0x91, 0xd0, 0x53, 0xdf, 0x9b, 0x99, 0xce, 0xef,
	0xb5, 0x03, 0xd8, 0xec, 0xc9, 0x91, 0x5d, 0x7f, 0x54, 0x54, 0x7c, 0xad, 0xd8, 0xa0, 0x60, 0x93,
	0xd6, 0x30, 0x7d, 0xec, 0x84, 0xd4, 0xdf, 0xad, 0xb6, 0x0e, 0xaf, 0x21, 0x6e, 0x76, 0xa6, 0x4c,
	0xa2, 0xab, 0x68, 0x39, 0xc9, 0x26, 0x2b, 0xff, 0xca, 0xcb, 0xce, 0x94, 0xdb, 0x81, 0xe4, 0x16,
	0xde, 0x82, 0xc8, 0x95, 0x2b, 0x3e, 0x93, 0x7f, 0x3c, 0x73, 0x11, 0x66, 0x36, 0x5d, 0xed, 0xc9,
	0x58, 0xbd, 0x77, 0x61, 0xd9, 0x76, 0x20, 0xfd, 0xe4, 0x66, 0x04, 0xe2, 0x47, 0x55, 0xad, 0x4e,
	0x09, 0xce, 0x03, 0xce, 0x36, 0x64, 0xac, 0x66, 0x1e, 0x9d, 0xf2, 0x28, 0xf0, 0xc8, 0x94, 0x98,
	0x1d, 0xf3, 0x16, 0x7d, 0x3c, 0xbf, 0xad, 0x07, 0x38, 0x84, 0xb8, 0x0b, 0xcf, 0x4f, 0x32, 0x65,
	0xfa, 0x0a, 0x78, 0x1a, 0x14, 0x11, 0xe2, 0x77, 0xe5, 0x14, 0xa7, 0x98, 0x4a, 0xd6, 0x38, 0x07,
	0xe1, 0x54, 0x5e, 0x69, 0xc6, 0x8e, 0xa5, 0x37, 0x78, 0x09, 0xc0, 0xe2, 0xcd, 0xa8, 0x5a, 0x27,
	0xff, 0xb9, 0x35, 0xe6, 0xca, 0xb3, 0xaa, 0x75, 0xba, 0x86, 0x59, 0x4f, 0x2e, 0x4c, 0x60, 0x64,
	0xdb, 0xa2, 0xd0, 0xd6, 0x32, 0xe2, 0x4c, 0x1e, 0x6c, 0xf6, 0x00, 0x82, 0x7f, 0x08, 0xde, 0x1f,
	0xc4, 0x2c, 0x7c, 0xdf, 0xdf, 0xb3, 0x2c, 0xe6, 0xc7, 0x45, 0xbf, 0x76, 0x19, 0xdd, 0x44, 0xf9,
	0x90, 0xcf, 0x79, 0xf7, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x10, 0x4e, 0x51, 0x2f, 0xe4, 0x01, 0x00,
	0x00,
}
