// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flock.proto

package flock

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Offset int32

const (
	Offset_ON  Offset = 0
	Offset_OFF Offset = 1
)

var Offset_name = map[int32]string{
	0: "ON",
	1: "OFF",
}

var Offset_value = map[string]int32{
	"ON":  0,
	"OFF": 1,
}

func (x Offset) String() string {
	return proto.EnumName(Offset_name, int32(x))
}

func (Offset) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a87515fe46cf1e69, []int{0}
}

type FlockRequest struct {
	// Types that are valid to be assigned to Value:
	//	*FlockRequest_Ping
	//	*FlockRequest_Batch
	Value                isFlockRequest_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FlockRequest) Reset()         { *m = FlockRequest{} }
func (m *FlockRequest) String() string { return proto.CompactTextString(m) }
func (*FlockRequest) ProtoMessage()    {}
func (*FlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87515fe46cf1e69, []int{0}
}

func (m *FlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlockRequest.Unmarshal(m, b)
}
func (m *FlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlockRequest.Marshal(b, m, deterministic)
}
func (m *FlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlockRequest.Merge(m, src)
}
func (m *FlockRequest) XXX_Size() int {
	return xxx_messageInfo_FlockRequest.Size(m)
}
func (m *FlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlockRequest proto.InternalMessageInfo

type isFlockRequest_Value interface {
	isFlockRequest_Value()
}

type FlockRequest_Ping struct {
	Ping *Ping `protobuf:"bytes,1,opt,name=ping,proto3,oneof"`
}

type FlockRequest_Batch struct {
	Batch *BatchInsertRequest `protobuf:"bytes,2,opt,name=batch,proto3,oneof"`
}

func (*FlockRequest_Ping) isFlockRequest_Value() {}

func (*FlockRequest_Batch) isFlockRequest_Value() {}

func (m *FlockRequest) GetValue() isFlockRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FlockRequest) GetPing() *Ping {
	if x, ok := m.GetValue().(*FlockRequest_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *FlockRequest) GetBatch() *BatchInsertRequest {
	if x, ok := m.GetValue().(*FlockRequest_Batch); ok {
		return x.Batch
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FlockRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FlockRequest_Ping)(nil),
		(*FlockRequest_Batch)(nil),
	}
}

type FlockResponse struct {
	// Types that are valid to be assigned to Value:
	//	*FlockResponse_Pong
	//	*FlockResponse_Batch
	Value                isFlockResponse_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FlockResponse) Reset()         { *m = FlockResponse{} }
func (m *FlockResponse) String() string { return proto.CompactTextString(m) }
func (*FlockResponse) ProtoMessage()    {}
func (*FlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87515fe46cf1e69, []int{1}
}

func (m *FlockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlockResponse.Unmarshal(m, b)
}
func (m *FlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlockResponse.Marshal(b, m, deterministic)
}
func (m *FlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlockResponse.Merge(m, src)
}
func (m *FlockResponse) XXX_Size() int {
	return xxx_messageInfo_FlockResponse.Size(m)
}
func (m *FlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FlockResponse proto.InternalMessageInfo

type isFlockResponse_Value interface {
	isFlockResponse_Value()
}

type FlockResponse_Pong struct {
	Pong *Pong `protobuf:"bytes,1,opt,name=pong,proto3,oneof"`
}

type FlockResponse_Batch struct {
	Batch *BatchInsertResponse `protobuf:"bytes,2,opt,name=batch,proto3,oneof"`
}

func (*FlockResponse_Pong) isFlockResponse_Value() {}

func (*FlockResponse_Batch) isFlockResponse_Value() {}

func (m *FlockResponse) GetValue() isFlockResponse_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FlockResponse) GetPong() *Pong {
	if x, ok := m.GetValue().(*FlockResponse_Pong); ok {
		return x.Pong
	}
	return nil
}

func (m *FlockResponse) GetBatch() *BatchInsertResponse {
	if x, ok := m.GetValue().(*FlockResponse_Batch); ok {
		return x.Batch
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FlockResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FlockResponse_Pong)(nil),
		(*FlockResponse_Batch)(nil),
	}
}

type Ping struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87515fe46cf1e69, []int{2}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

type Pong struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87515fe46cf1e69, []int{3}
}

func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

type BatchInsertRequest struct {
	Offset               Offset   `protobuf:"varint,1,opt,name=offset,proto3,enum=flock.Offset" json:"offset,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Table                string   `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	TableName            string   `protobuf:"bytes,4,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchInsertRequest) Reset()         { *m = BatchInsertRequest{} }
func (m *BatchInsertRequest) String() string { return proto.CompactTextString(m) }
func (*BatchInsertRequest) ProtoMessage()    {}
func (*BatchInsertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87515fe46cf1e69, []int{4}
}

func (m *BatchInsertRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchInsertRequest.Unmarshal(m, b)
}
func (m *BatchInsertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchInsertRequest.Marshal(b, m, deterministic)
}
func (m *BatchInsertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchInsertRequest.Merge(m, src)
}
func (m *BatchInsertRequest) XXX_Size() int {
	return xxx_messageInfo_BatchInsertRequest.Size(m)
}
func (m *BatchInsertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchInsertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchInsertRequest proto.InternalMessageInfo

func (m *BatchInsertRequest) GetOffset() Offset {
	if m != nil {
		return m.Offset
	}
	return Offset_ON
}

func (m *BatchInsertRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BatchInsertRequest) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *BatchInsertRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

type BatchInsertResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchInsertResponse) Reset()         { *m = BatchInsertResponse{} }
func (m *BatchInsertResponse) String() string { return proto.CompactTextString(m) }
func (*BatchInsertResponse) ProtoMessage()    {}
func (*BatchInsertResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a87515fe46cf1e69, []int{5}
}

func (m *BatchInsertResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchInsertResponse.Unmarshal(m, b)
}
func (m *BatchInsertResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchInsertResponse.Marshal(b, m, deterministic)
}
func (m *BatchInsertResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchInsertResponse.Merge(m, src)
}
func (m *BatchInsertResponse) XXX_Size() int {
	return xxx_messageInfo_BatchInsertResponse.Size(m)
}
func (m *BatchInsertResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchInsertResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchInsertResponse proto.InternalMessageInfo

func (m *BatchInsertResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterEnum("flock.Offset", Offset_name, Offset_value)
	proto.RegisterType((*FlockRequest)(nil), "flock.FlockRequest")
	proto.RegisterType((*FlockResponse)(nil), "flock.FlockResponse")
	proto.RegisterType((*Ping)(nil), "flock.Ping")
	proto.RegisterType((*Pong)(nil), "flock.Pong")
	proto.RegisterType((*BatchInsertRequest)(nil), "flock.BatchInsertRequest")
	proto.RegisterType((*BatchInsertResponse)(nil), "flock.BatchInsertResponse")
}

func init() { proto.RegisterFile("flock.proto", fileDescriptor_a87515fe46cf1e69) }

var fileDescriptor_a87515fe46cf1e69 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x6a, 0xf2, 0x40,
	0x10, 0xc7, 0x5d, 0x4d, 0xe2, 0xe7, 0xa8, 0x1f, 0x32, 0x7a, 0x88, 0x42, 0xc1, 0x06, 0x0a, 0xd2,
	0x83, 0x6d, 0x53, 0xe8, 0xb5, 0xe0, 0x41, 0xec, 0x45, 0xcb, 0xbe, 0x40, 0x59, 0xd3, 0x35, 0x95,
	0xea, 0xae, 0x75, 0x37, 0x7d, 0x82, 0x3e, 0x78, 0xc9, 0xec, 0x0a, 0x15, 0x73, 0xca, 0xcc, 0x7f,
	0x26, 0xfb, 0xfb, 0x91, 0x2c, 0xb4, 0x37, 0x3b, 0x9d, 0x7d, 0x4e, 0x0f, 0x47, 0x6d, 0x35, 0x86,
	0xd4, 0x24, 0x7b, 0xe8, 0xcc, 0xcb, 0x82, 0xcb, 0xaf, 0x42, 0x1a, 0x8b, 0xd7, 0x10, 0x1c, 0xb6,
	0x2a, 0x8f, 0xd9, 0x98, 0x4d, 0xda, 0x69, 0x7b, 0xea, 0x5e, 0x79, 0xdd, 0xaa, 0x7c, 0x51, 0xe3,
	0x34, 0xc2, 0x07, 0x08, 0xd7, 0xc2, 0x66, 0x1f, 0x71, 0x9d, 0x76, 0x86, 0x7e, 0x67, 0x56, 0x66,
	0x2f, 0xca, 0xc8, 0xa3, 0xf5, 0x87, 0x2d, 0x6a, 0xdc, 0x6d, 0xce, 0x9a, 0x10, 0x7e, 0x8b, 0x5d,
	0x21, 0x13, 0x0d, 0x5d, 0x8f, 0x33, 0x07, 0xad, 0x8c, 0x24, 0x9e, 0xbe, 0xe4, 0x69, 0xcf, 0xd3,
	0x2a, 0xc7, 0xf4, 0x9c, 0x37, 0xaa, 0xe2, 0xb9, 0xd3, 0x2a, 0x80, 0x11, 0x04, 0xa5, 0x3c, 0x3d,
	0xb5, 0xca, 0x93, 0x1f, 0x06, 0x78, 0x69, 0x8a, 0x37, 0x10, 0xe9, 0xcd, 0xc6, 0x48, 0x4b, 0x22,
	0xff, 0xd3, 0xae, 0x87, 0xac, 0x28, 0xe4, 0x7e, 0x88, 0x08, 0xc1, 0xbb, 0xb0, 0x82, 0x4c, 0x3a,
	0x9c, 0x6a, 0x1c, 0x40, 0x68, 0xc5, 0x7a, 0x27, 0xe3, 0xc6, 0x98, 0x4d, 0x5a, 0xdc, 0x35, 0x78,
	0x05, 0x40, 0xc5, 0x9b, 0x12, 0x7b, 0x19, 0x07, 0x34, 0x6a, 0x51, 0xb2, 0x14, 0x7b, 0x99, 0xdc,
	0x41, 0xbf, 0xc2, 0x1f, 0x63, 0x68, 0x9a, 0x22, 0xcb, 0xa4, 0x31, 0xe4, 0xf1, 0x8f, 0x9f, 0xda,
	0xdb, 0x21, 0x44, 0xce, 0x05, 0x23, 0xa8, 0xaf, 0x96, 0xbd, 0x1a, 0x36, 0xa1, 0xb1, 0x9a, 0xcf,
	0x7b, 0x2c, 0x7d, 0x86, 0x90, 0xbe, 0x29, 0x3e, 0x9d, 0x8a, 0xbe, 0xb7, 0xff, 0xfb, 0x67, 0x47,
	0x83, 0xf3, 0xd0, 0x11, 0x27, 0xec, 0x9e, 0xad, 0x23, 0xba, 0x11, 0x8f, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xdc, 0x5c, 0x59, 0x90, 0x20, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FlockClient is the client API for Flock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlockClient interface {
	Flock(ctx context.Context, opts ...grpc.CallOption) (Flock_FlockClient, error)
}

type flockClient struct {
	cc *grpc.ClientConn
}

func NewFlockClient(cc *grpc.ClientConn) FlockClient {
	return &flockClient{cc}
}

func (c *flockClient) Flock(ctx context.Context, opts ...grpc.CallOption) (Flock_FlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Flock_serviceDesc.Streams[0], "/flock.Flock/Flock", opts...)
	if err != nil {
		return nil, err
	}
	x := &flockFlockClient{stream}
	return x, nil
}

type Flock_FlockClient interface {
	Send(*FlockRequest) error
	Recv() (*FlockResponse, error)
	grpc.ClientStream
}

type flockFlockClient struct {
	grpc.ClientStream
}

func (x *flockFlockClient) Send(m *FlockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *flockFlockClient) Recv() (*FlockResponse, error) {
	m := new(FlockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FlockServer is the server API for Flock service.
type FlockServer interface {
	Flock(Flock_FlockServer) error
}

// UnimplementedFlockServer can be embedded to have forward compatible implementations.
type UnimplementedFlockServer struct {
}

func (*UnimplementedFlockServer) Flock(srv Flock_FlockServer) error {
	return status.Errorf(codes.Unimplemented, "method Flock not implemented")
}

func RegisterFlockServer(s *grpc.Server, srv FlockServer) {
	s.RegisterService(&_Flock_serviceDesc, srv)
}

func _Flock_Flock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlockServer).Flock(&flockFlockServer{stream})
}

type Flock_FlockServer interface {
	Send(*FlockResponse) error
	Recv() (*FlockRequest, error)
	grpc.ServerStream
}

type flockFlockServer struct {
	grpc.ServerStream
}

func (x *flockFlockServer) Send(m *FlockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *flockFlockServer) Recv() (*FlockRequest, error) {
	m := new(FlockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Flock_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flock.Flock",
	HandlerType: (*FlockServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Flock",
			Handler:       _Flock_Flock_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "flock.proto",
}
